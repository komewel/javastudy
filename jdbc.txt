

Class.forName();이름으로 로드한다
Properties p = new Properties();요소를 빼올라고 클래스를 부른다
p.load(new BufferedReader(new FileReader("db.properties")));클래스로 기능을 구현해서 분석을한다
con = DriverManager.getConnection(, );이 정보의 맞는 계정을 찾는다



Class Member {
int member_no     Member m = new Member
String id;
String name;	m.setMember_no();
String address; 	m.setid();
Date join_date	...
}

member 객체 만드는 이유가 Select 한 정보를 담으려고, select한줄(?)당 하나의 객체가 
만들어진다.

Connection(Interface) : Oracle DataBase와 연결할 때 사용하는 Connection 인터페이스

Class.forName : 이름으로 클래스를 호출하는 기능

DriverManager.getConnection(url, user, password) : 
DriverManager가 url, user, password 정보를 가지고 sql에 접속해
데이터와 상응하는 계정으로 접속한다.

오라클과 자바의 연결을 위해 오라클사에서 클래스제공(.jar파일로)을 하고있다 

우리가 사용할 소스코드 위치
oracle.jdbc.oracle driver

url 구성의 localhost:1521:xe 가 들어가는 이유는 로그인같은 이유?

윈도우-> 쇼뷰-> 아더-> 데이타매니지먼트-> 데이타소스익스플로러->데이타베이스코넥션 우클릭
->데이타베이스->오라클->이름은 GDJ61 확인 -> 드라이버에 자르 추가-> 오라클 씬 드라이버 11 
-> 자르리스트에 있는 자르 파일 삭제 -> 애드자르(자르 추가하고) -> 프로퍼티스 고른다음 (위에)
-> userid의 gdj61 위에 패스워드에 1111작성하고 데이타베이스 네임에 xe -> url의 local
host랑 xe 수정하고 ok -> save password 체크하고 -> 테스트 커넥션 누르기 ->finish누르기
(이방식이 코드 안짜고 데이타베이스 직접 접속한 과정을 해본거임)

패키지 만든다음 클래스가 아니라 아더에서 sql 파일 검색하고
확인 누르고 contact.sql 로 이름 설정해주고 피니쉬 버튼
이과정이 sql 에서 하는거랑 똑같음 그저 새로운툴이라고 보면됨

이클립스에서 짠 쿼리문은 위쪽에 타입을 오라클 11로 설정
네임에 GDJ61 그럼 커넥트 뜰거임 맨옆에
그럼 우클릭에서 EXECUTEALL 누르면 실행

데이타베이스의 정보를 보내는 전송 객체(DTO, VO 등등 DTO로 더 많이 불림)
 dao는 db에 데이터 넣고 빼오고 하는거 밖에없음
화면 -> 컨트롤러 -> 서비스(CRUD) -> DAO -> DB
 WEB	ㄴ----------------------------------------ㅓ
					JAVA	

서버는 인터페이스(본문이 하나도없다, 목록만 있다) 아래 구성하는 클래스(구동은여기서)를 만들고

실무에서는 이름이 xxxservice(인터페이스)이렇게 되었는데
여기는 메소드 목록만 있고 실제 구동은 xxxserviceimpl(클래스)이 다해준다

메인클래스 ->컨택트 컨트롤러 -> 콘택트 서비스 임플 -> 콘택트 다오 -> 콘택트 순으로 호출
역으로 구현 한다 (복습) , 개발은 다오부터 건드리기

비즈니스 레이어 --- 퍼시스턴스 레이어
(service)		 (dao)

class xxxService {
	Dao dao = Dao.getinstance(); (new로 객체화 하면 안된다)
	목록 메소드() {
		dao.목록();
	}
}

class Dao {
	Singleton 패턴 dao 객체 생성
	getInstance() {
		return dao;
	}
	목록() {
		SELECT...
	}
class Controller {      
	play() {
	try {		예외가 다 이쪽으로 던져져서 예외처리를 해줌
	목록서비스();
	}catch() {}
	}

}
class Service {
	Dao dao = Dao.getInstance();
	목록서비스() throws Exception {
 	try { dao.목록();} catch() {}

	}

}

class Dao {
	목록() Throws Exception {  예외가 목록서비스쪽으로 목록서비스는 위에 목록서비스로
	//try- catch - finally 사라짐
   }

}
	
